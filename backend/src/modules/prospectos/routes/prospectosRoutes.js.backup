const express = require('express');
const rateLimit = require('express-rate-limit');
const router = express.Router();
const ProspectosController = require('../controllers/prospectosController');

// CONFIGURACI√ìN DE RATE LIMITING PARA CREACI√ìN DE PROSPECTOS
const createProspectoRateLimit = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutos
    max: 20, // m√°ximo 20 creaciones por IP cada 15 minutos
    message: {
        success: false,
        error: 'Demasiados intentos de creaci√≥n. Espere 15 minutos antes de intentar nuevamente.',
        reintentarEn: '15 minutos'
    },
    standardHeaders: true,
    legacyHeaders: false,
});

// RATE LIMITING PARA ACTUALIZACIONES MASIVAS
const updateRateLimit = rateLimit({
    windowMs: 5 * 60 * 1000, // 5 minutos
    max: 50, // m√°ximo 50 actualizaciones por IP cada 5 minutos
    message: {
        success: false,
        error: 'Demasiadas actualizaciones. Espere 5 minutos antes de continuar.',
        reintentarEn: '5 minutos'
    },
    standardHeaders: true,
    legacyHeaders: false,
});

// MIDDLEWARE DE VALIDACI√ìN DE DATOS
const validarDatosProspecto = (req, res, next) => {
    try {
        const { nombre_cliente, telefono, canal_contacto } = req.body;

        // Validaciones b√°sicas para creaci√≥n
        if (req.method === 'POST') {
            if (!nombre_cliente?.trim()) {
                return res.status(400).json({
                    success: false,
                    error: 'El nombre del cliente es requerido'
                });
            }

            if (!telefono?.trim()) {
                return res.status(400).json({
                    success: false,
                    error: 'El tel√©fono es requerido'
                });
            }

            if (!canal_contacto?.trim()) {
                return res.status(400).json({
                    success: false,
                    error: 'El canal de contacto es requerido'
                });
            }
        }

        // Sanitizar tel√©fono (remover espacios y caracteres especiales)
        if (req.body.telefono) {
            req.body.telefono = req.body.telefono.replace(/[^\d+]/g, '');
        }

        // Sanitizar strings
        ['nombre_cliente', 'apellido_cliente', 'empresa', 'observaciones'].forEach(field => {
            if (req.body[field]) {
                req.body[field] = req.body[field].trim();
            }
        });

        next();
    } catch (error) {
        res.status(500).json({
            success: false,
            error: 'Error en validaci√≥n de datos: ' + error.message
        });
    }
};

// =====================================================
// RUTAS PRINCIPALES DEL PIPELINE
// =====================================================

/**
 * GET /api/prospectos
 * Obtener todos los prospectos con filtros
 * Query params: asesor_id, estado, canal_contacto, fecha_desde, fecha_hasta, antiguedad, busqueda, page, limit
 */
router.get('/', ProspectosController.obtenerTodos);

/**
 * POST /api/prospectos
 * Crear nuevo prospecto
 * Body: { nombre_cliente, telefono, canal_contacto, email?, empresa?, productos_interes?, ... }
 */
router.post('/', createProspectoRateLimit, validarDatosProspecto, ProspectosController.crearProspecto);

/**
 * PUT /api/prospectos/:id
 * Actualizar prospecto completo
 * Body: { campos_a_actualizar }
 */
router.put('/:id', updateRateLimit, validarDatosProspecto, ProspectosController.actualizarProspecto);

/**
 * PATCH /api/prospectos/:id/estado
 * Cambiar estado del prospecto (para drag & drop del Kanban)
 * Body: { estado: 'Prospecto'|'Cotizado'|'Negociacion'|'Cerrado'|'Perdido', motivo?: string }
 */
router.patch('/:id/estado', updateRateLimit, ProspectosController.cambiarEstado);

/**
 * POST /api/prospectos/:id/cerrar-venta
 * Convertir prospecto en venta (bot√≥n "Cerrar venta")
 * Body: { valor_final?, productos_vendidos?, observaciones_cierre? }
 */
router.post('/:id/cerrar-venta', ProspectosController.cerrarVenta);

// =====================================================
// RUTAS ESPEC√çFICAS DEL KANBAN BOARD
// =====================================================

/**
 * GET /api/prospectos/kanban/:asesorId
 * GET /api/prospectos/kanban
 * Obtener datos organizados para Kanban Board
 * Params: asesorId (opcional) - 'todos' para ver todos, n√∫mero para asesor espec√≠fico
 * Query: incluir_modo_libre=true para incluir prospectos en modo libre
 */
router.get('/kanban/:asesorId', ProspectosController.obtenerKanban);
router.get('/kanban', ProspectosController.obtenerKanban);

// =====================================================
// RUTAS DE M√âTRICAS Y AN√ÅLISIS
// =====================================================

/**
 * GET /api/prospectos/metricas/:asesorId
 * GET /api/prospectos/metricas
 * Obtener m√©tricas del pipeline (general o por asesor)
 * Params: asesorId (opcional) - 'todos' para m√©tricas generales
 * Query: fecha_desde, fecha_hasta (opcional para filtrar por per√≠odo)
 */
router.get('/metricas/:asesorId', ProspectosController.obtenerMetricas);
router.get('/metricas', ProspectosController.obtenerMetricas);

// =====================================================
// RUTAS DE UTILIDAD
// =====================================================

/**
 * GET /api/prospectos/verificar-duplicado/:telefono
 * Verificar si existe prospecto con ese tel√©fono
 * Params: telefono
 * Query: excluir_id (opcional, para excluir un ID espec√≠fico en actualizaciones)
 */
router.get('/verificar-duplicado/:telefono', ProspectosController.verificarDuplicado);

// =====================================================
// HEALTH CHECK
// =====================================================

/**
 * GET /api/prospectos/health
 * Verificar estado del m√≥dulo de prospectos
 */
router.get('/health', ProspectosController.healthCheck);

// =====================================================
// RUTAS DE INFORMACI√ìN DEL SISTEMA
// =====================================================

/**
 * GET /api/prospectos/info/estados
 * Obtener lista de estados v√°lidos del pipeline
 */
router.get('/info/estados', (req, res) => {
    res.json({
        success: true,
        data: {
            estados: [
                { codigo: 'Prospecto', nombre: 'Prospecto', descripcion: 'Contacto inicial registrado' },
                { codigo: 'Cotizado', nombre: 'Cotizado', descripcion: 'Cotizaci√≥n enviada al cliente' },
                { codigo: 'Negociacion', nombre: 'Negociaci√≥n', descripcion: 'En proceso de negociaci√≥n' },
                { codigo: 'Cerrado', nombre: 'Cerrado', descripcion: 'Venta exitosa' },
                { codigo: 'Perdido', nombre: 'Perdido', descripcion: 'No se concret√≥ la venta' }
            ],
            flujo_normal: 'Prospecto ‚Üí Cotizado ‚Üí Negociaci√≥n ‚Üí Cerrado',
            notas: 'Cualquier estado puede ir directamente a Perdido con justificaci√≥n'
        }
    });
});

/**
 * GET /api/prospectos/info/canales
 * Obtener lista de canales de contacto v√°lidos
 */
router.get('/info/canales', (req, res) => {
    res.json({
        success: true,
        data: {
            canales: [
                { codigo: 'WhatsApp', nombre: 'WhatsApp', icono: 'üì±' },
                { codigo: 'Messenger', nombre: 'Facebook Messenger', icono: 'üí¨' },
                { codigo: 'Facebook', nombre: 'Facebook', icono: 'üìò' },
                { codigo: 'TikTok', nombre: 'TikTok', icono: 'üéµ' },
                { codigo: 'Llamada', nombre: 'Llamada Telef√≥nica', icono: 'üìû' },
                { codigo: 'Presencial', nombre: 'Visita Presencial', icono: 'üè¢' },
                { codigo: 'Email', nombre: 'Correo Electr√≥nico', icono: 'üìß' }
            ],
            recomendacion: 'WhatsApp es el canal m√°s efectivo seg√∫n las m√©tricas'
        }
    });
});

// =====================================================
// RUTAS CON PAR√ÅMETROS DIN√ÅMICOS (AL FINAL)
// =====================================================

/**
 * GET /api/prospectos/:id
 * Obtener prospecto espec√≠fico por ID
 * IMPORTANTE: Esta ruta va AL FINAL para no interferir con rutas espec√≠ficas
 */
router.get('/:id', ProspectosController.obtenerPorId || ((req, res) => {
    // Endpoint b√°sico hasta implementar m√©todo espec√≠fico
    res.status(501).json({
        success: false,
        error: 'Endpoint en desarrollo - usar /api/prospectos con filtros por ahora'
    });
}));

// =====================================================
// MIDDLEWARE DE MANEJO DE ERRORES
// =====================================================

router.use((error, req, res, next) => {
    console.error('Error en rutas de prospectos:', error);
    
    // Errores de Supabase
    if (error.code) {
        return res.status(500).json({
            success: false,
            error: 'Error de base de datos',
            codigo: error.code,
            detalles: process.env.NODE_ENV === 'development' ? error.message : 'Error interno'
        });
    }
    
    // Errores generales
    res.status(500).json({
        success: false,
        error: 'Error interno del servidor en m√≥dulo de prospectos',
        timestamp: new Date().toISOString()
    });
});

module.exports = router;