// backend/src/modules/prospectos/utils/fechasHelper.js

/**
 * üìÖ HELPER DE FECHAS PARA SEGUIMIENTOS
 * Manejo flexible de fechas sin hardcodes
 * Ajuste autom√°tico a horario laboral
 */

/**
 * Calcula la fecha l√≠mite para un seguimiento seg√∫n tipo y fecha programada
 * @param {string|Date} fechaProgramada - Fecha programada del seguimiento
 * @param {string} tipoSeguimiento - Tipo de seguimiento (Llamada, WhatsApp, etc.)
 * @returns {string} Fecha l√≠mite en formato ISO
 */
const calcularFechaLimite = (fechaProgramada, tipoSeguimiento = 'Llamada') => {
    const fecha = new Date(fechaProgramada);

    // Reglas de negocio por tipo de seguimiento
    // Define cu√°nto tiempo despu√©s de la fecha programada vence el seguimiento
    const reglas = {
        'Llamada': { horas: 4 },           // 4 horas despu√©s
        'WhatsApp': { dias: 1 },           // 1 d√≠a despu√©s
        'Messenger': { dias: 1 },          // 1 d√≠a despu√©s
        'Email': { dias: 2 },              // 2 d√≠as despu√©s
        'Visita': { horas: 2 },            // 2 horas despu√©s (m√°s urgente)
        'Presencial': { horas: 2 },        // 2 horas despu√©s
        'Cotizaci√≥n': { dias: 3 },         // 3 d√≠as despu√©s
        'Seguimiento': { dias: 1 },        // 1 d√≠a despu√©s (gen√©rico)
        'Reunion': { horas: 2 }            // 2 horas despu√©s
    };

    // Obtener regla espec√≠fica o usar default
    const regla = reglas[tipoSeguimiento] || { dias: 1 };

    // Aplicar tiempo seg√∫n regla
    if (regla.dias) {
        fecha.setDate(fecha.getDate() + regla.dias);
    }
    if (regla.horas) {
        fecha.setHours(fecha.getHours() + regla.horas);
    }

    // Ajustar a horario laboral si cae fuera
    return ajustarAHorarioLaboral(fecha);
};

/**
 * Ajusta una fecha al pr√≥ximo horario laboral disponible
 * Horario laboral: L-V 8am-6pm, S√°b 9am-12pm, Dom cerrado
 * @param {Date} fecha - Fecha a ajustar
 * @returns {string} Fecha ajustada en formato ISO
 */
const ajustarAHorarioLaboral = (fecha) => {
    const dia = fecha.getDay(); // 0 = Domingo, 1 = Lunes, ..., 6 = S√°bado
    const hora = fecha.getHours();

    // Caso 1: Domingo ‚Üí Mover a Lunes 8am
    if (dia === 0) {
        fecha.setDate(fecha.getDate() + 1);
        fecha.setHours(8, 0, 0, 0);
        return fecha.toISOString();
    }

    // Caso 2: S√°bado despu√©s de 12pm ‚Üí Mover a Lunes 8am
    if (dia === 6 && hora >= 12) {
        fecha.setDate(fecha.getDate() + 2); // S√°bado ‚Üí Lunes
        fecha.setHours(8, 0, 0, 0);
        return fecha.toISOString();
    }

    // Caso 3: S√°bado antes de 9am ‚Üí Ajustar a 9am
    if (dia === 6 && hora < 9) {
        fecha.setHours(9, 0, 0, 0);
        return fecha.toISOString();
    }

    // Caso 4: Lunes a Viernes antes de 8am ‚Üí Ajustar a 8am mismo d√≠a
    if (dia >= 1 && dia <= 5 && hora < 8) {
        fecha.setHours(8, 0, 0, 0);
        return fecha.toISOString();
    }

    // Caso 5: Lunes a Viernes despu√©s de 6pm ‚Üí Mover a siguiente d√≠a 8am
    if (dia >= 1 && dia <= 5 && hora >= 18) {
        fecha.setDate(fecha.getDate() + 1);
        fecha.setHours(8, 0, 0, 0);
        // Verificar si el siguiente d√≠a es domingo
        if (fecha.getDay() === 0) {
            fecha.setDate(fecha.getDate() + 1); // Domingo ‚Üí Lunes
        }
        // Verificar si el siguiente d√≠a es s√°bado despu√©s de medianoche
        if (fecha.getDay() === 6) {
            fecha.setHours(9, 0, 0, 0); // Ajustar a 9am s√°bado
        }
        return fecha.toISOString();
    }

    // Caso 6: Dentro de horario laboral ‚Üí Sin cambios
    return fecha.toISOString();
};

/**
 * Valida si una fecha est√° dentro del horario laboral
 * @param {string|Date} fecha - Fecha a validar
 * @returns {boolean} true si est√° en horario laboral
 */
const esHorarioLaboral = (fecha) => {
    const date = new Date(fecha);
    const dia = date.getDay();
    const hora = date.getHours();

    // Lunes a Viernes: 8am-6pm
    if (dia >= 1 && dia <= 5) {
        return hora >= 8 && hora < 18;
    }

    // S√°bado: 9am-12pm
    if (dia === 6) {
        return hora >= 9 && hora < 12;
    }

    // Domingo: Cerrado
    return false;
};

/**
 * Obtiene informaci√≥n descriptiva del horario laboral
 * @returns {object} Objeto con informaci√≥n del horario
 */
const obtenerInfoHorarioLaboral = () => {
    return {
        semana: {
            dias: 'Lunes a Viernes',
            horario: '8:00 AM - 6:00 PM',
            horas_totales: 10
        },
        sabado: {
            dias: 'S√°bado',
            horario: '9:00 AM - 12:00 PM',
            horas_totales: 3
        },
        domingo: {
            dias: 'Domingo',
            horario: 'Cerrado',
            horas_totales: 0
        },
        total_horas_semanales: 53, // 50 (L-V) + 3 (S√°b)
        descripcion: 'L-V 8am-6pm, S√°b 9am-12pm, Dom cerrado'
    };
};

/**
 * Calcula la pr√≥xima fecha laboral disponible desde ahora
 * √ötil para sugerir fechas al usuario
 * @param {number} horasAdelante - Horas hacia adelante (opcional)
 * @returns {string} Fecha en formato ISO
 */
const obtenerProximaFechaLaboral = (horasAdelante = 0) => {
    const ahora = new Date();
    ahora.setHours(ahora.getHours() + horasAdelante);
    return ajustarAHorarioLaboral(ahora);
};

/**
 * Genera sugerencias inteligentes de fechas para seguimientos
 * @param {string} tipoSeguimiento - Tipo de seguimiento
 * @param {string} estadoProspecto - Estado actual del prospecto
 * @returns {array} Array de sugerencias con fecha y descripci√≥n
 */
const generarSugerenciasFechas = (tipoSeguimiento = 'Llamada', estadoProspecto = 'Interesado') => {
    const ahora = new Date();
    const sugerencias = [];

    // Sugerencia 1: Ma√±ana temprano
    const manana = new Date(ahora);
    manana.setDate(manana.getDate() + 1);
    manana.setHours(10, 0, 0, 0);
    sugerencias.push({
        fecha: ajustarAHorarioLaboral(manana),
        descripcion: 'Ma√±ana temprano (10am)',
        recomendado: estadoProspecto === 'Caliente' || estadoProspecto === 'Negociacion'
    });

    // Sugerencia 2: En 3 d√≠as
    const tresDias = new Date(ahora);
    tresDias.setDate(tresDias.getDate() + 3);
    tresDias.setHours(14, 0, 0, 0);
    sugerencias.push({
        fecha: ajustarAHorarioLaboral(tresDias),
        descripcion: 'En 3 d√≠as (2pm)',
        recomendado: estadoProspecto === 'Interesado'
    });

    // Sugerencia 3: En una semana
    const unaSemana = new Date(ahora);
    unaSemana.setDate(unaSemana.getDate() + 7);
    unaSemana.setHours(10, 0, 0, 0);
    sugerencias.push({
        fecha: ajustarAHorarioLaboral(unaSemana),
        descripcion: 'En una semana (10am)',
        recomendado: estadoProspecto === 'Frio' || estadoProspecto === 'Contactado'
    });

    // Ajustar seg√∫n tipo de seguimiento
    if (tipoSeguimiento === 'Email' || tipoSeguimiento === 'WhatsApp') {
        // Para mensajes, sugerir tambi√©n horarios de tarde
        const tardeDosHoras = new Date(ahora);
        tardeDosHoras.setHours(tardeDosHoras.getHours() + 2);
        sugerencias.unshift({
            fecha: ajustarAHorarioLaboral(tardeDosHoras),
            descripcion: 'En 2 horas',
            recomendado: true
        });
    }

    return sugerencias;
};

/**
 * üïê CALCULAR FECHA L√çMITE: 2 D√çAS LABORALES COMPLETOS
 * Horario laboral: L-V 8am-6pm, S√°b 9am-12pm, Dom no laboral
 *
 * @param {Date|string} fechaInicio - Fecha de inicio del seguimiento
 * @returns {Date} Fecha l√≠mite despu√©s de 2 d√≠as laborales completos (6pm del segundo d√≠a laboral)
 */
const calcular2DiasLaborales = (fechaInicio) => {
    const fecha = new Date(fechaInicio);
    let diasLaboralesContados = 0;
    let fechaActual = new Date(fecha);

    // Avanzar hasta completar 2 d√≠as laborales completos
    while (diasLaboralesContados < 2) {
        const diaSemana = fechaActual.getDay(); // 0=dom, 1=lun, ..., 6=s√°b

        // Saltar domingos
        if (diaSemana === 0) {
            fechaActual.setDate(fechaActual.getDate() + 1);
            fechaActual.setHours(8, 0, 0, 0);
            continue;
        }

        // S√°bados cuentan como d√≠a parcial (3 horas de 10 = 0.3 d√≠as)
        if (diaSemana === 6) {
            fechaActual.setHours(12, 0, 0, 0); // Fin jornada s√°bado
            diasLaboralesContados += 0.3;
            if (diasLaboralesContados < 2) {
                fechaActual.setDate(fechaActual.getDate() + 2); // Ir al lunes
                fechaActual.setHours(8, 0, 0, 0);
            }
            continue;
        }

        // Lunes a Viernes cuenta como 1 d√≠a completo
        diasLaboralesContados++;
        if (diasLaboralesContados >= 2) {
            // Establecer hora l√≠mite a 6pm del segundo d√≠a laboral
            fechaActual.setHours(18, 0, 0, 0);
            break;
        }

        // Ir al siguiente d√≠a laboral
        fechaActual.setDate(fechaActual.getDate() + 1);
        fechaActual.setHours(8, 0, 0, 0);
    }

    return fechaActual;
};

module.exports = {
    calcularFechaLimite,
    ajustarAHorarioLaboral,
    esHorarioLaboral,
    obtenerInfoHorarioLaboral,
    obtenerProximaFechaLaboral,
    generarSugerenciasFechas,
    calcular2DiasLaborales
};
