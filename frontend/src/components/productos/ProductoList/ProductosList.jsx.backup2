import React, { useState, useEffect, useCallback } from 'react';

const ProductosList = () => {
    const [productos, setProductos] = useState([]);
    const [categorias, setCategorias] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [estadisticas, setEstadisticas] = useState({
        totalProductos: 0,
        totalCategorias: 0,
        precioPromedio: 0
    });

    // Función para cargar categorías con manejo completo de errores
    const cargarCategorias = useCallback(async () => {
        try {
            const response = await fetch('http://localhost:3000/api/productos/categorias');
            
            if (!response.ok) {
                throw new Error(`Error HTTP: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (data.success && Array.isArray(data.data)) {
                setCategorias(data.data);
                return data.data;
            } else {
                throw new Error(data.message || 'Formato de respuesta inválido');
            }
        } catch (error) {
            console.error('Error al cargar categorías:', error);
            setCategorias([]);
            throw new Error(`Error al cargar categorías: ${error.message}`);
        }
    }, []);

    // Función para cargar productos con manejo completo de errores
    const cargarProductos = useCallback(async () => {
        try {
            const response = await fetch('http://localhost:3000/api/productos');
            
            if (!response.ok) {
                throw new Error(`Error HTTP: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (data.success && Array.isArray(data.data)) {
                setProductos(data.data);
                return data.data;
            } else {
                throw new Error(data.message || 'Formato de respuesta inválido');
            }
        } catch (error) {
            console.error('Error al cargar productos:', error);
            setProductos([]);
            throw new Error(`Error al cargar productos: ${error.message}`);
        }
    }, []);

    // Función para calcular estadísticas
    const calcularEstadisticas = useCallback((productos, categorias) => {
        const totalProductos = productos.length;
        const totalCategorias = categorias.length;
        const precioPromedio = totalProductos > 0 
            ? productos.reduce((sum, producto) => {
                const precio = parseFloat(producto.precio_sin_igv) || 0;
                return sum + precio;
            }, 0) / totalProductos
            : 0;

        setEstadisticas({
            totalProductos,
            totalCategorias,
            precioPromedio: parseFloat(precioPromedio.toFixed(2))
        });
    }, []);

    // Función principal para cargar todos los datos
    const cargarDatos = useCallback(async () => {
        setLoading(true);
        setError(null);
        
        try {
            const [productosData, categoriasData] = await Promise.all([
                cargarProductos(),
                cargarCategorias()
            ]);
            
            calcularEstadisticas(productosData, categoriasData);
            
        } catch (error) {
            setError(error.message);
            console.error('Error al cargar datos:', error);
        } finally {
            setLoading(false);
        }
    }, [cargarProductos, cargarCategorias, calcularEstadisticas]);

    // Cargar datos al montar el componente
    useEffect(() => {
        cargarDatos();
    }, [cargarDatos]);

    // Función para reintentar carga de datos
    const reintentar = () => {
        cargarDatos();
    };

    // Función para formatear precio
    const formatearPrecio = (precio) => {
        const precioNum = parseFloat(precio) || 0;
        return `$ ${precioNum.toFixed(2)}`;
    };

    // Función para obtener nombre de categoría
    const obtenerNombreCategoria = (categoriaId) => {
        if (!categoriaId) return 'Sin categoría';
        const categoria = categorias.find(cat => cat.id === categoriaId);
        return categoria ? categoria.nombre : 'Categoría desconocida';
    };

    // Renderizado condicional para estado de carga
    if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <h2 className="text-xl font-semibold text-gray-700 mb-2">Cargando datos...</h2>
                    <p className="text-gray-500">Por favor espera un momento</p>
                </div>
            </div>
        );
    }

    // Renderizado condicional para estado de error
    if (error) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center max-w-md mx-auto">
                    <div className="bg-red-100 rounded-full p-4 mx-auto mb-4 w-16 h-16 flex items-center justify-center">
                        <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <h2 className="text-xl font-semibold text-gray-700 mb-2">Error al cargar datos</h2>
                    <p className="text-gray-500 mb-6">{error}</p>
                    <button 
                        onClick={reintentar}
                        className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors duration-200 flex items-center mx-auto"
                    >
                        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                        </svg>
                        Reintentar
                    </button>
                </div>
            </div>
        );
    }

    // Renderizado principal
    return (
        <div className="min-h-screen bg-gray-50 p-4 sm:p-6">
            {/* Header */}
            <div className="mb-8">
                <h1 className="text-3xl sm:text-4xl font-bold text-gray-900 mb-2">Gestión de Productos</h1>
                <p className="text-gray-600">Administra tu catálogo de productos de forma eficiente</p>
            </div>
            
            {/* Estadísticas */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 mb-8">
                <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200 hover:shadow-md transition-shadow duration-200">
                    <div className="flex items-center">
                        <div className="p-3 bg-blue-100 rounded-lg">
                            <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                            </svg>
                        </div>
                        <div className="ml-4">
                            <p className="text-sm font-medium text-gray-600">Total Productos</p>
                            <p className="text-2xl font-bold text-gray-900">{estadisticas.totalProductos}</p>
                        </div>
                    </div>
                </div>
                
                <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200 hover:shadow-md transition-shadow duration-200">
                    <div className="flex items-center">
                        <div className="p-3 bg-green-100 rounded-lg">
                            <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                            </svg>
                        </div>
                        <div className="ml-4">
                            <p className="text-sm font-medium text-gray-600">Categorías</p>
                            <p className="text-2xl font-bold text-gray-900">{estadisticas.totalCategorias}</p>
                        </div>
                    </div>
                </div>

                <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200 hover:shadow-md transition-shadow duration-200 sm:col-span-2 lg:col-span-1">
                    <div className="flex items-center">
                        <div className="p-3 bg-yellow-100 rounded-lg">
                            <svg className="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                            </svg>
                        </div>
                        <div className="ml-4">
                            <p className="text-sm font-medium text-gray-600">Precio Promedio</p>
                            <p className="text-2xl font-bold text-gray-900">{formatearPrecio(estadisticas.precioPromedio)}</p>
                        </div>
                    </div>
                </div>
            </div>

            {/* Contenido principal */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Lista de productos */}
                <div className="lg:col-span-2">
                    <div className="bg-white rounded-xl shadow-sm border border-gray-200">
                        <div className="p-6 border-b border-gray-200">
                            <div className="flex items-center justify-between">
                                <h2 className="text-xl font-semibold text-gray-900">Lista de Productos</h2>
                                <button 
                                    onClick={reintentar}
                                    className="text-gray-400 hover:text-gray-600 transition-colors duration-200"
                                    title="Actualizar lista"
                                >
                                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                        
                        <div className="overflow-x-auto">
                            {productos.length === 0 ? (
                                <div className="p-12 text-center">
                                    <div className="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                                        <svg className="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                                        </svg>
                                    </div>
                                    <h3 className="text-lg font-medium text-gray-900 mb-2">No hay productos registrados</h3>
                                    <p className="text-gray-500 mb-6">Comienza agregando productos a tu catálogo</p>
                                    <button className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors duration-200">
                                        Agregar primer producto
                                    </button>
                                </div>
                            ) : (
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Código</th>
                                            <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Descripción</th>
                                            <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precio</th>
                                            <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Marca</th>
                                            <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Categoría</th>
                                        </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                        {productos.map((producto, index) => (
                                            <tr key={producto.id || index} className="hover:bg-gray-50 transition-colors duration-150">
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <span className="text-sm font-medium text-gray-900">{producto.codigo || 'N/A'}</span>
                                                </td>
                                                <td className="px-6 py-4">
                                                    <div className="text-sm text-gray-900 max-w-xs">
                                                        <div className="truncate" title={producto.descripcion}>
                                                            {producto.descripcion || 'Sin descripción'}
                                                        </div>
                                                    </div>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <span className="text-sm font-medium text-gray-900">
                                                        {formatearPrecio(producto.precio_sin_igv)}
                                                    </span>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <span className="text-sm text-gray-900">{producto.marca || '-'}</span>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                        {producto.categorias?.nombre || "Sin categoría"}
                                                    </span>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            )}
                        </div>
                    </div>
                </div>

                {/* Panel de categorías */}
                <div className="lg:col-span-1">
                    <div className="bg-white rounded-xl shadow-sm border border-gray-200">
                        <div className="p-6 border-b border-gray-200">
                            <h3 className="text-lg font-semibold text-gray-900">Categorías Disponibles</h3>
                        </div>
                        <div className="p-6">
                            {categorias.length === 0 ? (
                                <div className="text-center py-8">
                                    <div className="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                                        <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                                        </svg>
                                    </div>
                                    <p className="text-gray-500">No hay categorías disponibles</p>
                                </div>
                            ) : (
                                <div className="space-y-3">
                                    {categorias.map((categoria, index) => (
                                        <div key={categoria.id || index} className="p-4 bg-blue-50 rounded-lg border border-blue-200 hover:bg-blue-100 transition-colors duration-150">
                                            <h4 className="font-medium text-blue-900 mb-1">{categoria.nombre || 'Sin nombre'}</h4>
                                            <p className="text-sm text-blue-700">{categoria.descripcion || 'Sin descripción'}</p>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ProductosList;
